#[async_trait::async_trait]
trait Foo: Clone {
    type T: hyper::rt::Read + hyper::rt::Write + Unpin;
    async fn get_io(&self, option: Option<TlsAcceptor>, stream: TcpStream) -> Result<Self::T>;
}

#[derive(Clone)]
pub struct Foo1;
#[derive(Clone)]
pub struct Foo2;
#[async_trait::async_trait]
impl Foo for Foo1 {
    type T = TokioIo<TcpStream>;

    async fn get_io(&self, _:Option<TlsAcceptor>, stream: TcpStream) -> Result<Self::T> {
        Ok(TokioIo::new(stream))
    }
}
#[async_trait::async_trait]
impl Foo for Foo2 {
    type T = TokioIo<TlsStream<TcpStream>>;

    async fn get_io(&self, tls_acceptor: Option<TlsAcceptor>, stream: TcpStream) -> Result<Self::T> {
        Ok(TokioIo::new(tls_acceptor.ok_or(CLIError::new("Unable to create stream"))?.accept(stream).await?))
    }
}