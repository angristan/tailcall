---
source: src/config/from_proto.rs
expression: result
---
schema @server @upstream {
  query: Query
  mutation: Mutation
}

input AuthorNews {
  email: String
  name: String
}

input HelloRequestGreetings {
  name: String
}

input HelloRequestGreetingsDup {
  name: String
}

input MultipleNewsIdNews {
  ids: [NewsIdNews]
}

input NewsIdNews {
  id: Int
}

input NewsNews {
  author: AuthorNews
  body: String
  foo: StatusNEWS
  id: Int
  postImage: String
  title: String
}

enum StatusNEWS {
  DRAFT
  PUBLISHED
}

type HelloReplyGreetings {
  message: String
}

type HelloReplyGreetingsDup {
  message: String
}

type Mutation {
  addNewsNews(news: NewsNews!): NewsNews! @grpc(method: "news.NewsService.AddNews")
  deleteNewsNews(newsId: NewsIdNews!): String @grpc(method: "news.NewsService.DeleteNews")
  editNewsNews(news: NewsNews!): NewsNews! @grpc(method: "news.NewsService.EditNews")
  sayHelloGreetings(helloRequest: HelloRequestGreetings!): HelloReplyGreetings! @grpc(method: "greetings.Greeter.SayHello")
  sayHelloGreetingsDup(helloRequest: HelloRequestGreetingsDup!): HelloReplyGreetingsDup! @grpc(method: "greetings_dup.Greeter.SayHello")
}

type NewsListNews {
  news: [NewsNews]
}

type Query {
  getAllNewsNews: NewsListNews! @grpc(method: "news.NewsService.GetAllNews")
  getMultipleNewsNews(multipleNewsId: MultipleNewsIdNews!): NewsListNews! @grpc(method: "news.NewsService.GetMultipleNews")
  getNewsNews(newsId: NewsIdNews!): NewsNews! @grpc(method: "news.NewsService.GetNews")
}
