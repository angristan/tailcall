---
source: src/grpc_generator/proto_generator.rs
assertion_line: 541
expression: config.to_sdl()
---
schema @server @upstream {
  query: Query
  mutation: Mutation
}

input Author_news {
  email: String
  name: String
}

input HelloRequest_greetings {
  name: String
}

input HelloRequest_greetings_dup {
  name: String
}

input MultipleNewsId_news {
  ids: [NewsId_news]
}

input NewsId_news {
  id: Int
}

input News_news {
  author: Author_news
  body: String
  foo: Status_news
  id: Int
  postImage: String
  title: String
}

enum Status_news {
  DRAFT
  PUBLISHED
}

type HelloReply_greetings {
  message: String
}

type HelloReply_greetings_dup {
  message: String
}

type Mutation {
  add-news-news_mymut(news: News_news!): News_news! @grpc(method: "news.NewsService.AddNews")
  delete-news-news_mymut(newsId: NewsId_news!): String @grpc(method: "news.NewsService.DeleteNews")
  edit-news-news_mymut(news: News_news!): News_news! @grpc(method: "news.NewsService.EditNews")
  say-hello-greetings-dup_mymut(helloRequest: HelloRequest_greetings_dup!): HelloReply_greetings_dup! @grpc(method: "greetings_dup.Greeter.SayHello")
  say-hello-greetings_mymut(helloRequest: HelloRequest_greetings!): HelloReply_greetings! @grpc(method: "greetings.Greeter.SayHello")
}

type NewsList_news {
  news: [News_news]
}

type Query {
  gEtAlLNEwSNEwS_myqry: NewsList_news! @grpc(method: "news.NewsService.GetAllNews")
  gEtMuLtIpLeNeWsNeWs_myqry(multipleNewsId: MultipleNewsId_news!): NewsList_news! @grpc(method: "news.NewsService.GetMultipleNews")
  gEtNeWsNeWs_myqry(newsId: NewsId_news!): News_news! @grpc(method: "news.NewsService.GetNews")
}
